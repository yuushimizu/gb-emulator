use crate::util::ascii;
use std::ops::RangeInclusive;

#[derive(Debug)]
pub struct Licensee {
    pub old_code: u8,
    pub new_code: Option<[u8; 2]>,
    pub name: Option<&'static str>,
}

const OLD_POSITION: usize = 0x014B;

const NEW_RANGE: RangeInclusive<usize> = 0x0144..=0x0145;

fn name_from_old_code(value: u8) -> Option<&'static str> {
    match value {
        0x00 => Some("None"),
        0x01 => Some("Nintendo"),
        0x08 => Some("CAPCOM"),
        0x09 => Some("Hot-B"),
        0x0A => Some("JALECO"),
        0x0B => Some("Coconuts"),
        0x0C => Some("Elite Systems"),
        0x13 => Some("Electronic Arts"),
        0x18 => Some("Hudson Soft"),
        0x19 => Some("ITC Entertainment"),
        0x1A => Some("YANOMAN"),
        0x1D => Some("Clary"),
        0x1F => Some("Virgin"),
        0x24 => Some("PCM Complete"),
        0x25 => Some("San-x"),
        0x28 => Some("Kotobuki Systems"),
        0x29 => Some("Seta"),
        0x30 => Some("Infogrames"),
        0x31 => Some("Nintendo"),
        0x32 => Some("BANDAI"),
        0x34 => Some("KONAMI"),
        0x35 => Some("Hector"),
        0x38 => Some("CAPCOM"),
        0x39 => Some("BANPRESTO"),
        0x3C => Some("Entertainment i..."),
        0x3E => Some("Gremlin"),
        0x41 => Some("Ubisoft"),
        0x42 => Some("ATLUS"),
        0x44 => Some("MALIBU"),
        0x46 => Some("Angel"),
        0x47 => Some("Spectrum HoloByte"),
        0x49 => Some("IREM"),
        0x4A => Some("Virgin"),
        0x4D => Some("MALIBU"),
        0x4F => Some("U.S. Gold"),
        0x50 => Some("Absolute"),
        0x51 => Some("Acclaim"),
        0x52 => Some("Activision"),
        0x53 => Some("American Sammy"),
        0x54 => Some("GameTek"),
        0x55 => Some("Park Place"),
        0x56 => Some("LJN"),
        0x57 => Some("MATCHBOX"),
        0x59 => Some("Milton Bradley"),
        0x5A => Some("Mindscape"),
        0x5B => Some("Romstar"),
        0x5C => Some("NAXAT Soft"),
        0x5D => Some("Tradewest"),
        0x60 => Some("Titus"),
        0x61 => Some("Virgin"),
        0x67 => Some("Ocean"),
        0x69 => Some("Electronic Arts"),
        0x6E => Some("Elite Systems"),
        0x6F => Some("Electro Brain"),
        0x70 => Some("Infogrames"),
        0x71 => Some("Interplay"),
        0x72 => Some("Broderbund"),
        0x73 => Some("Sculptured Soft"),
        0x75 => Some("The Sales Curve"),
        0x78 => Some("THQ"),
        0x79 => Some("Accolade"),
        0x7A => Some("Triffix Entertainment"),
        0x7C => Some("Microprose"),
        0x7F => Some("KEMCO"),
        0x80 => Some("Misawa Entertainment"),
        0x83 => Some("LOZC"),
        0x86 => Some("Tokumashoten Intermedia"),
        0x8B => Some("Bullet-Proof Software"),
        0x8C => Some("VIC TOKAI"),
        0x8E => Some("APE"),
        0x8F => Some("I'Max"),
        0x91 => Some("CHUNSOFT"),
        0x92 => Some("Video System"),
        0x93 => Some("TSUBURAYA"),
        0x95 => Some("Varie"),
        0x96 => Some("YONEZAWA/S'PAL"),
        0x97 => Some("KANEKO"),
        0x99 => Some("ARC"),
        0x9A => Some("Nihon Bussan"),
        0x9B => Some("TECMO"),
        0x9C => Some("Imagineer"),
        0x9D => Some("BANPRESTO"),
        0x9F => Some("NOVA"),
        0xA1 => Some("HORI Electric"),
        0xA2 => Some("BANDAI"),
        0xA4 => Some("KONAMI"),
        0xA6 => Some("Kawada"),
        0xA7 => Some("TAKARA"),
        0xA9 => Some("Technos Japan"),
        0xAA => Some("Broderbund"),
        0xAC => Some("TOEI Animation"),
        0xAD => Some("TOHO"),
        0xAF => Some("namco"),
        0xB0 => Some("Acclaim"),
        0xB1 => Some("Ascii | Nexoft"),
        0xB2 => Some("BANDAI"),
        0xB4 => Some("ENIX"),
        0xB6 => Some("HAL"),
        0xB7 => Some("SNK"),
        0xB9 => Some("PONY CANYON"),
        0xBA => Some("Culture Brain"),
        0xBB => Some("SUNSOFT"),
        0xBD => Some("Sony Imagesoft"),
        0xBF => Some("Sammy"),
        0xC0 => Some("TAITO"),
        0xC2 => Some("KEMCO"),
        0xC3 => Some("SQUARESOFT"),
        0xC4 => Some("Tokumashoten Intermedia"),
        0xC5 => Some("Data East"),
        0xC6 => Some("TONKINHOUSE"),
        0xC8 => Some("Koei"),
        0xC9 => Some("UFL"),
        0xCA => Some("Ultra"),
        0xCB => Some("VAP"),
        0xCC => Some("USE"),
        0xCD => Some("Meldac"),
        0xCE => Some("PONY CANYON"),
        0xCF => Some("Angel"),
        0xD0 => Some("TAITO"),
        0xD1 => Some("SOFEL"),
        0xD2 => Some("Quest"),
        0xD3 => Some("Sigma Enterprises"),
        0xD4 => Some("ASK Kodansha"),
        0xD6 => Some("NAXAT Soft"),
        0xD7 => Some("COPYA SYSTEM"),
        0xD9 => Some("BANPRESTO"),
        0xDA => Some("TOMY"),
        0xDB => Some("LJN"),
        0xDD => Some("NCS"),
        0xDE => Some("Human"),
        0xDF => Some("Altron"),
        0xE0 => Some("JALECO"),
        0xE1 => Some("Towachiki"),
        0xE2 => Some("Yutaka"),
        0xE3 => Some("Varie"),
        0xE5 => Some("EPOCH"),
        0xE7 => Some("Athena"),
        0xE8 => Some("Asmik"),
        0xE9 => Some("Natsume"),
        0xEA => Some("KING RECORDS"),
        0xEB => Some("Atlus"),
        0xEC => Some("EPIC/Sony Records"),
        0xEE => Some("IGS"),
        0xF0 => Some("A Wave"),
        0xF3 => Some("Extreme Entertainment"),
        0xFF => Some("LJN"),
        _ => None,
    }
}

fn name_from_new_code(value: &[u8; 2]) -> Option<&'static str> {
    match u8::from_str_radix(ascii::from_bytes(value).as_str(), 16).ok()? {
        0x19 => Some("B-AI"),
        0x20 => Some("KSS"),
        0x22 => Some("POW"),
        0x28 => Some("KEMCO"),
        0x30 => Some("Viacom"),
        0x33 => Some("Ocean/Acclaim"),
        0x37 => Some("TAITO"),
        0x38 => Some("Hudson"),
        0x47 => Some("Bullet-Proof"),
        0x54 => Some("KONAMI"),
        0x55 => Some("Hi Tech Entertainment"),
        0x58 => Some("Mattel"),
        0x64 => Some("LucasArts"),
        0x75 => Some("SCI"),
        0x87 => Some("Tsukuda Original"),
        0x93 => Some("Ocean/Acclaim"),
        0x99 => Some("PACK-IN-SOFT"),
        combined => name_from_old_code(combined),
    }
}

impl Licensee {
    pub fn load(rom_bytes: &[u8]) -> Self {
        let old_code = rom_bytes[OLD_POSITION];
        match old_code {
            0x33 => {
                let new_code: Option<[u8; 2]> = rom_bytes[NEW_RANGE].try_into().ok();
                Self {
                    old_code,
                    new_code,
                    name: new_code.and_then(|value| name_from_new_code(&value)),
                }
            }
            value => Self {
                old_code,
                new_code: None,
                name: name_from_old_code(value),
            },
        }
    }
}
